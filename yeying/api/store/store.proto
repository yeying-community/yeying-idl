syntax = "proto3";
option go_package = "yeying/api/store";
package yeying.api.store;

import "google/api/annotations.proto";
import "yeying/api/common/code.proto";

/**
 * 开放的分散式仓库网络（简称，odsn）的接口设计，参考了现实世界中的仓库，逻辑如下：
 * 1、仓库中的每件货物有且只有一个二维码，通过二维码管理货物，扫码入库和扫码出库，在odsn中的内容的唯一标识是内容的哈希值，通过哈希值判断是否已经入
 * 库。由于在网络世界中内容的复制成本几乎为零，并且可以做到一摸一样，无法辨别真伪，所以odsn中所有货物都会维持两个计数器，分别记录存和取的的次数。
 * 2、每件商品上市前都会提前备货，发送到不同地区的仓库。通过odsn发布内容时，也会可能会发送多份且分散到不同的网络节点中，一方面保证内容不会因为单个
 * 节点故障而丢失，另外也保证内容的可访问性。
 * 3、仓库的货物入库的可能是厂家，出库的可能是渠道商，货物的交易并不是在仓库中完成，而是通过协议约定当有顾客购买货物时从仓库调取，所以在设计odsn接
 * 口时也是尽可能简单，不会记录买卖关系，但会统计一些信息，比如统计内容取（浏览）的次数评估内容热度，或者统计内容存的次数（收藏）评估内容质量，目的
 * 是更好的分配存储资源。
 *
 * odsn的使用场景：
 * 1、创作场景，知识产权证明
 * 2、代码包分发场景，比如软件包，模型包等
 * 3、数字资产
 *
 */
service Store {
  /**
   * 检索数字内容，基于数字内容的元信息检索，比如时间、类型、名称等, 如果什么条件都不传入，则按照默认的排序顺序，返回第一个10条记录。
   */
  rpc Search(SearchRequest) returns (SearchResponse) {
    option (google.api.http) = {
      get: "/api/yeying/store/search"
    };
  }

  /**
   * 入库数字内容，如果计算的内容哈希值已存在，直接返回ALREADY_EXISTS，否则入库成功返回OK
   */
  rpc Put(stream PutRequest) returns (PutResponse) {
    option (google.api.http) = {
      post: "/api/yeying/store"
      body: "*"
    };
  }

  /**
   * 出库数字内容，如果计算的内容哈希值已存在，直接返回ALREADY_EXISTS，否则入库成功返回OK
   */
  rpc Get(GetRequest) returns (stream GetResponse) {
    option (google.api.http) = {
      get: "/api/yeying/store"
    };
  }

  /**
   * 下架数字内容
   */
  rpc Del(DelRequest) returns (DelResponse) {
    option (google.api.http) = {
      delete: "/api/yeying/store"
    };
  }
}

enum AssetType {
  DIRECTORY = 0;
  FILE = 1;
  CHUNK = 2;
}

enum CipherType {
  AES_GCM = 0;
}

message Identity {
  string did = 1;
}

message Asset {
  AssetType assetType = 1;
  string name = 2;
  string hash = 3;
  string type = 4;
  uint64 size = 5;
  uint64 created = 6;
  uint64 timestamp = 7;
  uint32 index = 8;
  uint32 total = 9;
  string sibling = 10;
  bool encrypted = 11;
  Cipher cipher = 12;
}

message Cipher {
  CipherType cipherType = 1;
  string iv = 2;
  string hash = 3;
  string sibling = 4;
  uint64 size = 5;
}

message Namespace {
  Identity owner = 1;
  string path = 2;
}

message Result {
  yeying.api.common.Code code = 1;
  string message = 2;
}

message SearchRequest {
  Namespace namespace = 1;
  bool recursive = 2;
  string condition = 3;
}

message SearchResponse {
  Result result = 1;
  Namespace namespace = 2;
  repeated AssetBundle assetBundles = 3;
}

message AssetBundle {
  Asset asset = 1;
  repeated Asset chunks = 2;
}

message PutRequest {
  oneof data {
    Metadata metadata = 1;
    bytes chunk = 2;
  }
}

message Metadata {
  Namespace namespace = 1;
  Asset asset = 2;
}

message PutResponse {
  Result result = 1;
  Namespace namespace = 2;
  Asset asset = 3;
}

message GetRequest {
  Namespace namespace = 1;
  string hash = 2;
}

message GetResponse {
  oneof data {
    Result result = 1;
    bytes chunk = 2;
  }
}

message DelRequest {
  Namespace namespace = 1;
  string hash = 2;
}

message DelResponse {
  Result result = 1;
}
