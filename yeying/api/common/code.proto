syntax = "proto3";


/**
 * TODO: 未来common目录下，统一生成到独立的包里面方便其他项目集成生成的代码，目前包的路径处理需要服务端或者客户端自行处理；
 * 请坚持使用package关键字，其好处如下：
 * 1. 组织和管理消息和服务：通过将它们归属到特定的包中，可以更好地组织和管理它们。
 * 2. 防止命名冲突：不同package下的消息和服务可以使用相同的名称，因为它们在不同的包命名空间中。
 * 3. 代码生成工具支持：代码生成工具可以根据指定的package生成相应的包结构，使得生成的代码更具可读性和可维护性。
 */
package yeying.api.common;
option go_package = "yeying/api/common";

/**
 * 接口的响应状态码定义遵循的规则，必须包含以下4个说明：
 * 1、编码
 * 2、编号
 * 3、含义
 * 4、使用场景
 */
enum ResponseCode {
  /**
   * 含义：操作完成
   * 使用场景：成功创建、成功提交
   */
  OK = 0;

  /**
   * 含义：提供的参数无效或不符合预期
   * 使用场景：当接收到客户端请求参数不正确时返回
   */
  INVALID_ARGUMENT = 1;

  /**
   * 含义：请求未通过身份验证
   * 使用场景：当请求需要身份验证但未提供有效凭据时返回
   */
  UNAUTHENTICATED = 2;

  /**
   * 含义：请求无法被执行，因为没有足够的权限
   * 使用场景：当客户端没有执行请求所需操作的权限时返回
   */
  PERMISSION_DENIED = 3;

  /**
   * 含义：请求对象或资源未找到
   * 使用场景：当请求的对象或资源不存在时返回
   */
  NOT_FOUND = 4;

  /**
   * 含义：请求创建的对象已经存在
   * 使用场景：当请求创建的对象（如用户、资源等）已经存在时返回
   */
  ALREADY_EXISTS = 5;

  /**
   * 含义：超过了资源使用限制
   * 使用场景：当请求操作超过了预先设定的限制时返回
   */
  LIMIT_EXCEEDED = 6;

  /**
   * 含义：请求的服务当前不可用
   * 使用场景：当请求的服务不可用（例如服务器维护、过载等）时返回
   */
  UNAVAILABLE = 7;

  /**
   * 含义：未知错误
   * 使用场景：当出现未知错误时返回或无法精确匹配到其他错误码时使用
   */
  UNKNOWN_ERROR = 8;
}

/**
 * 合约的状态码需要遵守的规则：
 * 1、编码
 * 2、编号
 * 3、含义
 * 4、使用场景
 */
enum ContractStatusCode {
  /**
   * 含义：未生效
   * 使用场景：拟定了一份合同，参与方没有完全签字
  */
  INACTIVATED = 0;

  /**
   * 含义：生效中
   * 使用场景：合同的参与方都已签字认可，合同已经开始工作
   */
  ACTIVATED = 1;

  /**
   * 含义：过期了
   * 使用场景：合同已经过期了，合同已停止工作
   */
  EXPIRED = 2;

  /**
   * 含义：终止了
   * 使用场景：合同的参与方中有人主动退出了合同
   */
  CANCELED = 3;
}

/**
 *
 */
enum LanguageCode {
  // 简体中文
  ZH_CH = 0;

  // 美国英语
  EN_US = 1;
}

enum MediaCode {
  TEXT = 0;
  IMAGE = 1;
  VIDEO = 2;
  AUDIO = 3;
}

