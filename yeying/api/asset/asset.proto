syntax = "proto3";
option go_package = "yeying/api/asset";
package yeying.api.asset;

import "yeying/api/common/message.proto";
import "yeying/api/common/code.proto";

/**

整个资产仓库基于分布式数字身份和资产内容哈希驱动，并能够在不同资产仓库间转移

开放的分散式仓库网络的接口设计，参考了现实世界中的仓库，逻辑如下：
1、数字资产有两个标识，一个是数字资产的身份标识，可以是分布式数字身份，也可以是用户自定义的身份ID，另一个是数字资产内容的哈希值；
2、数字资产入库，发送到指定存储网络中的节点，可以指定副本数量，一方面保证内容不会因为单个节点故障而丢失，另外也保证内容的可访问性；
3、存储复用，如果两份资产哈希值一样，分两种情况来看，如果资产的所有者一样，则仓库会主动告知身份持有者存在重复，如果资产的所有者不同，会增加引用；
4、授权数字资产，所有者和使用者立交易关系，确保使用者根据指定的策略访问数据，仓库会统计数字资产的使用情况，比如统计内容取（浏览）的次数评估内容热度
，或者统计内容存的次数（收藏）评估内容质量，目的是更好的分配存储资源；

仓库使用场景：
1、创作场景，知识产权证明
2、代码包分发场景，比如软件包，模型包等
3、数字资产，类似nft等

资产定位逻辑：

采用三元组唯一定位，(用户身份、命名空间、哈希值)
命名空间的定位逻辑：某个用户下面是唯一的，命名空间所有者，可以指定多个参与者，用于存储完成某项工作生成资产数据，这些资产数据属于命名空间所有者
资产的定位逻辑：每个命名空间是隔离的，同一个所有者，同一个命名空间，资产哈希值必须唯一
资产块的定位逻辑：每个命名空间是隔离的，用一个所有者，同一个命名空间，资产块是唯一的，资产块维持一个引用计数，其逻辑如下：
 - 当有一个新资产放入命名空间，则引用计数加1；
 - 当有一个老资产移出命名空间，则引用计数减1；
当某个资产块的引用计数为0，表示没有和资产仓库服务签约，只是临时存储，通常分块上传完成以后就会立即签约，但是考虑委托第三方服务生成的数据直接放到命名
空间，第三方服务没有命名空间所有者的私钥，无法和资产仓库完成签约，只能先上传，事后由命名空间所有者完成签名；

 */
service Asset {
  /**
   * 检索数字内容，基于数字内容的元信息检索，比如哈希值、时间、类型、名称等, 如果什么条件都不传入，则按照默认的排序顺序，返回第一个10条记录。
   */
  rpc Search(SearchAssetRequest) returns (SearchAssetResponse) {}

  /**
   * 以事务的形式和存储供应商签订协议并入库，当所有资产块入库成功后，资产的信息发送到后端服务签字确认，涵盖了新的资产和新的版本入库；
   * 1、根据规则，自动生成新的版本，资产身份不变，但是资产内容的哈希值会变
   */
  rpc Sign(SignAssetRequest) returns (SignAssetResponse) {}

  /**
   * 更新资产元信息
   */
  rpc Update(UpdateAssetRequest) returns (UpdateAssetResponse) {}

  /**
   * 获得资产详细信息，提供该接口是为了更灵活处理资产信息，资产信息的复杂主要是几个方面：
   * 1、资产分块，资产的块信息可能会很大
   * 2、多版本，资产描述信息也会很大
   * 3、分散存储，如果资产过大，可能会被存储到不同的供应商
   */
  rpc Detail(AssetDetailRequest) returns (AssetDetailResponse) {}

  /**
   * 删除资产，不回立即删除，而是放入回收站；资产支持多版本，在删除的时候，采取头或者尾部删除，不能从中间删除，确保版本的链条能够正常工作；
   */
  rpc Delete(DeleteAssetRequest) returns (DeleteAssetResponse) {}
}

message SearchAssetRequest {
  common.MessageHeader header = 1;
  SearchAssetRequestBody body = 2;
}

message SearchAssetRequestBody {
  SearchAssetCondition condition = 1;
  common.RequestPage page = 2;
}

message SearchAssetCondition {
  common.DigitalFormatEnum format = 1; // 资产内容格式
  string hash = 2; // 内容哈希值
  string namespaceId = 3; // 命名空间ID
  string name = 4; // 资产名称
}

message SearchAssetResponse {
  common.MessageHeader header = 1;
  SearchAssetResponseBody body = 2;
}

message SearchAssetResponseBody {
  common.ResponseStatus status = 1;
  repeated AssetMetadata assets = 2;
}

message SignAssetRequest {
  common.MessageHeader header = 1;
  SignAssetRequestBody body = 2;
}

message SignAssetRequestBody {
  AssetMetadata asset = 1; // 资产元信息, 资产版本统一由客户端生成，服务端验证版本的有效性，必须是最新的版本号
}

message SignAssetResponse {
  common.MessageHeader header = 1;
  SignAssetResponseBody body = 2;
}

message SignAssetResponseBody {
  common.ResponseStatus status = 1;
  AssetMetadata asset = 2;
}

message UpdateAssetRequest {
  common.MessageHeader header = 1;
  UpdateAssetRequestBody body = 2;
}

message UpdateAssetRequestBody {
  AssetMetadata asset = 1;
}

message UpdateAssetResponse {
  common.MessageHeader header = 1;
  UpdateAssetResponseBody body = 2;
}

message UpdateAssetResponseBody {
  common.ResponseStatus status = 1;
  AssetMetadata asset = 2;
}

message AssetDetailRequest {
  common.MessageHeader header = 1;
  AssetDetailRequestBody body = 2;
}

message AssetDetailRequestBody {
  string hash = 1; // 资产唯一ID
  string namespaceId = 2;
}

message AssetDetailResponse {
  common.MessageHeader header = 1;
  AssetDetailResponseBody body = 2;
}

message AssetDetailResponseBody {
  common.ResponseStatus status = 1;
  AssetMetadata asset = 2;
}

message DeleteAssetRequest {
  common.MessageHeader header = 1;
  DeleteAssetRequestBody body = 2;
}

message DeleteAssetRequestBody {
  string hash = 1; // 资产哈希值
  string namespaceId = 2;
}

message DeleteAssetResponse {
  common.MessageHeader header = 1;
  DeleteAssetResponseBody body = 2;
}

message DeleteAssetResponseBody {
  common.ResponseStatus status = 1;
}

// 资产定义
// 同一个所有者在使用两个应用时产生了相同的资产，也就是资产内容的哈希值一样，那么可能存在这样一种情况，一个应用不再使用这个资产要求删除，但是另一个
// 还需要使用不能删除，如何解决这个问题：在用户层面设置一个项目空间的概念，在项目空间里面保证哈希值唯一即可。
message AssetMetadata {
  // 资产命名空间
  string namespaceId = 1;
  // 资产所有者
  string owner = 2;
  // 父资产内容哈希值
  string parentHash = 3;
  // 资产内容哈希值
  string hash = 4;
  // 资产版本
  uint32 version = 5;
  // 资产名称
  string name = 6;
  // 所有资产块的哈希值
  repeated string chunks = 7;
  // 资产描述
  string description = 8;
  // 资产类型
  common.DigitalFormatEnum format = 9;
  // 明文资产的大小
  uint64 size = 10;
  // 资产创建时间
  string createdAt = 11;
  // 资产更新时间点
  string updatedAt = 12;
  // 资产块数量
  uint32 chunkCount = 13;
  // 资产块大小
  uint32 chunkSize = 14;
  // 是否加密
  bool isEncrypted = 15;
  // 资产元信息的签名
  string signature = 16;
}